6. (20 points) Be prepared to present and explain your work in the lab session immediately after the due date. 

q1: This code firstly creates a helper function "isPrime(num)" that checks if a number is a prime number. I use a "if" statement to ensure that the number is above 2 because the first prime number is 2. "1" is not a prime number even though it can only be divided by itself due to prime number rules so I created a statement that ensures if "num" is less than 2, the function will return "false" meaning that it is not a prime number. Then I created a "for" loop that checks if numbers "i" is a divisible by itself and if not, then it returns false. Then i used "return True" meaning if these conditions are not met then it is a prime number. 

The next function "getPrimeNumbers(n)" is the main function that gets prime numbers by creating a list and using a "for" loops to test if numbers(i) in range are prime numbers. If they are prime numbers, it is added to the list in order using "append". Then I have test functions that takes a number "n" then tests all number from "num" to "n", in this case 100. Then it prints all prime numbers in this range. 


q2: In this code, I first import the module "matplotlib" that is used to plot a bar graph that shows the results. I create my main function "graphSnowfall(t)" that firstly initialized counts by creating a list that states the "cm" boundaries. Then I use "open" to read the .txt file and I use a for loops to iterate through the conditions determined by "if" and "elif" statements that determines which boundary each value falls in. The next part plots these values into a bar chart using the module "matplotlib". Then I make a statement that shows which .txt file I am reading and I initialize my function input as the file path. 


q3: This code is used to retrieve data from a .txt file and returns where each word is found in the text by stating its line number. I start with a read statement that determines the file path and reads the data. Then I created a main function "wordCount(t)" and I intialize a dictionary "words" and count as "0". I used a dictionary as opposed to a list because a dictionary is a list of key-value pairs with unique keys. In this case, each word is a unique key-value pair and the code outputs each word found in the data and the paired lines that it finds the words in. 

q4: This code is used to retrieve data from a .txt file and reads the lines of numbers and prints, the numbers read, the count, the average and maximum of numbers. Firstly, I created a decortor function that initialized the calculations of numbers and prints each of the lists of numbers. Then I created a function "read_numbers" that takes string "line" as input, strips any leading or trailing whitespace, splits string into list of strings, converting to "int" type value, returns list of integers. Then I created main function that reads and opens the data. 
